"use strict";(self.webpackChunkwasmx_docs=self.webpackChunkwasmx_docs||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"overview","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/overview/introduction","docId":"overview/introduction","unlisted":false},{"type":"link","label":"Comparisons","href":"/docs/overview/comparisons","docId":"overview/comparisons","unlisted":false},{"type":"link","label":"Features Overview","href":"/docs/overview/features","docId":"overview/features","unlisted":false},{"type":"link","label":"Getting Started","href":"/docs/overview/getting_started","docId":"overview/getting_started","unlisted":false}],"href":"/docs/category/overview"},{"type":"category","label":"demos","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cross-chain protocols","href":"/docs/demos/cross-chain","docId":"demos/cross-chain","unlisted":false},{"type":"link","label":"Multi-chain support","href":"/docs/demos/multi-chain","docId":"demos/multi-chain","unlisted":false},{"type":"link","label":"Consensus protocols","href":"/docs/demos/multi-consensus","docId":"demos/multi-consensus","unlisted":false},{"type":"link","label":"Language agnostic","href":"/docs/demos/multi-language","docId":"demos/multi-language","unlisted":false},{"type":"link","label":"Multi-VM","href":"/docs/demos/multi-vm","docId":"demos/multi-vm","unlisted":false}],"href":"/docs/category/demos"},{"type":"category","label":"host apis","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ewasm","href":"/docs/apis/ewasm","docId":"apis/ewasm","unlisted":false},{"type":"link","label":"cosmwasm","href":"/docs/apis/cosmwasm","docId":"apis/cosmwasm","unlisted":false},{"type":"link","label":"wasmx","href":"/docs/apis/wasmx","docId":"apis/wasmx","unlisted":false}],"href":"/docs/category/host-apis"}]},"docs":{"apis/cosmwasm":{"id":"apis/cosmwasm","title":"cosmwasm","description":"","sidebar":"tutorialSidebar"},"apis/ewasm":{"id":"apis/ewasm","title":"ewasm","description":"","sidebar":"tutorialSidebar"},"apis/wasmx":{"id":"apis/wasmx","title":"wasmx","description":"TODO","sidebar":"tutorialSidebar"},"demos/cross-chain":{"id":"demos/cross-chain","title":"Cross-chain protocols","description":"Trees of blockchains: a scaling solution DEMO 1 [atomic, cross-chain transactions]","sidebar":"tutorialSidebar"},"demos/multi-chain":{"id":"demos/multi-chain","title":"Multi-chain support","description":"MythosX: #blockchain tree #scaling system DEMO 2 [multi-chain elective state syncing]","sidebar":"tutorialSidebar"},"demos/multi-consensus":{"id":"demos/multi-consensus","title":"Consensus protocols","description":"MythosX heterogeneous consensus algorithms for blockchains [visual state machines]","sidebar":"tutorialSidebar"},"demos/multi-language":{"id":"demos/multi-language","title":"Language agnostic","description":"Blockchain Visual Programming: Ethereum\'s ERC20 Token with Finite State Machines","sidebar":"tutorialSidebar"},"demos/multi-vm":{"id":"demos/multi-vm","title":"Multi-VM","description":"Meta-Contracts: Interpreters [Multi-EVM Interpreters on WasmX, Cosmos]","sidebar":"tutorialSidebar"},"overview/comparisons":{"id":"overview/comparisons","title":"Comparisons","description":"Blockchain VMs","sidebar":"tutorialSidebar"},"overview/features":{"id":"overview/features","title":"Features Overview","description":"Multi-VM","sidebar":"tutorialSidebar"},"overview/getting_started":{"id":"overview/getting_started","title":"Getting Started","description":"https://github.com/loredanacirstea/tempreleases/tree/main/mythos-testnet","sidebar":"tutorialSidebar"},"overview/introduction":{"id":"overview/introduction","title":"Introduction","description":"wasmX is a next-generation modular blockchain engine where the entire protocol stack, including consensus logic and core blockchain behavior, is implemented as WebAssembly (WASM) smart contracts.","sidebar":"tutorialSidebar"}}}}')}}]);