"use strict";(self.webpackChunkwasmx_docs=self.webpackChunkwasmx_docs||[]).push([[719],{1128:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"overview/introduction","title":"Introduction","description":"wasmX is a next-generation modular blockchain engine where the entire protocol stack\u2014including consensus logic and core blockchain behavior\u2014is implemented as WebAssembly (WASM) smart contracts. This radical modularity enables full programmability and upgradability at every layer of the blockchain, empowering developers with unprecedented flexibility and control.","source":"@site/docs/overview/introduction.md","sourceDirName":"overview","slug":"/overview/introduction","permalink":"/docs/overview/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/loredanacirstea/wasmx-docs/tree/main/docs/overview/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/docs/category/overview"},"next":{"title":"Getting Started","permalink":"/docs/overview/getting_started"}}');var s=n(4848),r=n(8453);const a={sidebar_position:1},o="Introduction",l={},c=[{value:"Key Features",id:"key-features",level:2},{value:"Fully Modular WASM Runtime",id:"fully-modular-wasm-runtime",level:3},{value:"Language-Agnostic Smart Contracts",id:"language-agnostic-smart-contracts",level:3},{value:"Rich Host APIs",id:"rich-host-apis",level:3},{value:"Built-In Interpreters for EVM, Python, JavaScript, and Diagrams",id:"built-in-interpreters-for-evm-python-javascript-and-diagrams",level:3},{value:"AssemblyScript SDK",id:"assemblyscript-sdk",level:3},{value:"Cosmos Compatibility, Reinvented",id:"cosmos-compatibility-reinvented",level:3},{value:"The most flexible platform",id:"the-most-flexible-platform",level:2}];function d(e){const i={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"wasmX"})," is a next-generation modular blockchain engine where the entire protocol stack\u2014including consensus logic and core blockchain behavior\u2014is implemented as WebAssembly (WASM) smart contracts. This radical modularity enables full programmability and upgradability at every layer of the blockchain, empowering developers with unprecedented flexibility and control."]}),"\n",(0,s.jsx)(i.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsx)(i.h3,{id:"fully-modular-wasm-runtime",children:"Fully Modular WASM Runtime"}),"\n",(0,s.jsx)(i.p,{children:"wasmX replaces the traditional hard-coded blockchain kernel with a modular runtime built entirely from smart contracts compiled to WASM. This includes core protocol logic, enabling seamless customization and hot-swappable upgrades."}),"\n",(0,s.jsx)(i.h3,{id:"language-agnostic-smart-contracts",children:"Language-Agnostic Smart Contracts"}),"\n",(0,s.jsx)(i.p,{children:"Developers can write contracts in any language that compiles to WebAssembly, including Rust, AssemblyScript, C/C++, and even Solidity via an Ethereum compatibility layer. This drastically lowers the barrier for developers coming from diverse ecosystems."}),"\n",(0,s.jsx)(i.h3,{id:"rich-host-apis",children:"Rich Host APIs"}),"\n",(0,s.jsx)(i.p,{children:"wasmX provides a powerful suite of host APIs that smart contracts can use:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Ethereum API \u2013 Supports existing Solidity contracts and tools."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"WasmX Native API \u2013 Offers basic blockchain functions like storage, block info, and message handling."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Multichain, crosschain & P2P APIs \u2013 For building interconnected blockchains and decentralized networks."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"gRPC Request API \u2013 Facilitates secure, extensible cross-chain or off-chain service communication."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"SQL & Key-Value Database APIs \u2013 Allowing structured and efficient on-chain/off-chain data access."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"IMAP/SMTP APIs \u2013 Enabling email-native interactions, identity, and verifiable communication on-chain."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"built-in-interpreters-for-evm-python-javascript-and-diagrams",children:"Built-In Interpreters for EVM, Python, JavaScript, and Diagrams"}),"\n",(0,s.jsx)(i.p,{children:"wasmX includes multiple built-in interpreters, allowing contracts or modules to run code written in EVM bytecode, Python, JavaScript, and a custom diagram-based interpreter. The diagram interpreter is currently used to define and run consensus algorithms visually and declaratively, powering consensus logic for wasmX-based chains without hardcoding it into the binary."}),"\n",(0,s.jsx)(i.h3,{id:"assemblyscript-sdk",children:"AssemblyScript SDK"}),"\n",(0,s.jsx)(i.p,{children:"wasmX already includes a dedicated SDK for AssemblyScript, offering a streamlined developer experience for building lightweight, high-performance contracts in a TypeScript-like language."}),"\n",(0,s.jsx)(i.h3,{id:"cosmos-compatibility-reinvented",children:"Cosmos Compatibility, Reinvented"}),"\n",(0,s.jsx)(i.p,{children:"While wasmX is compatible with Cosmos SDK-based chains, it has been completely WASM-modularized, decoupling it from the limitations of monolithic Cosmos modules and enabling new forms of governance, logic upgrades, and experimentation, all while the chain is live and running."}),"\n",(0,s.jsx)(i.h2,{id:"the-most-flexible-platform",children:"The most flexible platform"}),"\n",(0,s.jsx)(i.p,{children:"Build sovereign blockchains with customizable consensus and protocol rules."}),"\n",(0,s.jsx)(i.p,{children:"Prototype or evolve blockchain designs without deep C++/Golang kernel hacking and without forks."}),"\n",(0,s.jsx)(i.p,{children:"Interconnect applications and data across domains using email, SQL, and standard networking."}),"\n",(0,s.jsx)(i.p,{children:"Leverage existing Ethereum assets while exploring the broader capabilities of WASM."}),"\n",(0,s.jsx)(i.p,{children:"Use high-level scripting and visual logic to define complex behaviors like consensus without sacrificing performance or modularity."})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var t=n(6540);const s={},r=t.createContext(s);function a(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);