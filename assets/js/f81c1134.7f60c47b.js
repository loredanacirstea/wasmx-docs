"use strict";(self.webpackChunkwasmx_docs=self.webpackChunkwasmx_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"why-wasmx","metadata":{"permalink":"/blog/why-wasmx","editUrl":"https://github.com/loredanacirstea/wasmx-docs/tree/main/blog/2025-05-07-why-wasmx.md","source":"@site/blog/2025-05-07-why-wasmx.md","title":"why wasmX?","description":"wasmX is a next-generation modular blockchain engine where the entire protocol stack\u2014including consensus logic and core blockchain behavior\u2014is implemented as WebAssembly (WASM) smart contracts. This radical modularity enables full programmability and upgradability at every layer of the blockchain, empowering developers with unprecedented flexibility and control.","date":"2025-05-07T00:00:00.000Z","tags":[{"inline":false,"label":"wasmx","permalink":"/blog/tags/wasmx","description":"wasmx tag description"}],"readingTime":0.56,"hasTruncateMarker":true,"authors":[{"name":"Loredana Cirstea","title":"Lead Engineer @ wasmX","url":"https://github.com/loredanacirstea","page":{"permalink":"/blog/authors/loredana"},"socials":{"x":"https://x.com/lorecirstea","github":"https://github.com/loredanacirstea"},"imageURL":"https://avatars.githubusercontent.com/u/4785356?v=4","key":"loredana"}],"frontMatter":{"slug":"why-wasmx","title":"why wasmX?","authors":"loredana","tags":["wasmx"]},"unlisted":false,"nextItem":{"title":"MythosX - Treechains - heterogeneous consensus algorithms for blockchains [visual finite state machines]","permalink":"/blog/treechains-heterogeneous-consensus-algorithms"}},"content":"**wasmX** is a next-generation modular blockchain engine where the entire protocol stack\u2014including consensus logic and core blockchain behavior\u2014is implemented as WebAssembly (WASM) smart contracts. This radical modularity enables full programmability and upgradability at every layer of the blockchain, empowering developers with unprecedented flexibility and control.\\n\\n\x3c!-- truncate --\x3e\\n\\nBuild sovereign blockchains with customizable consensus and protocol rules.\\n\\nPrototype or evolve blockchain designs without deep C++/Golang kernel hacking and without forks.\\n\\nInterconnect applications and data across domains using email, SQL, and standard networking.\\n\\nLeverage existing Ethereum assets while exploring the broader capabilities of WASM.\\n\\nUse high-level scripting and visual logic to define complex behaviors like consensus without sacrificing performance or modularity."},{"id":"treechains-heterogeneous-consensus-algorithms","metadata":{"permalink":"/blog/treechains-heterogeneous-consensus-algorithms","editUrl":"https://github.com/loredanacirstea/wasmx-docs/tree/main/blog/2024-11-24-treechains-heterogeneous-consensus-algorithms.md","source":"@site/blog/2024-11-24-treechains-heterogeneous-consensus-algorithms.md","title":"MythosX - Treechains - heterogeneous consensus algorithms for blockchains [visual finite state machines]","description":"Simple blockchains are dying, long live the trees of blockchains.","date":"2024-11-24T00:00:00.000Z","tags":[{"inline":false,"label":"wasmx","permalink":"/blog/tags/wasmx","description":"wasmx tag description"},{"inline":false,"label":"treechains","permalink":"/blog/tags/treechains","description":"treechains tag description"},{"inline":false,"label":"mythos","permalink":"/blog/tags/mythos","description":"mythos tag description"}],"readingTime":2.78,"hasTruncateMarker":true,"authors":[{"name":"Loredana Cirstea","title":"Lead Engineer @ wasmX","url":"https://github.com/loredanacirstea","page":{"permalink":"/blog/authors/loredana"},"socials":{"x":"https://x.com/lorecirstea","github":"https://github.com/loredanacirstea"},"imageURL":"https://avatars.githubusercontent.com/u/4785356?v=4","key":"loredana"}],"frontMatter":{"slug":"treechains-heterogeneous-consensus-algorithms","title":"MythosX - Treechains - heterogeneous consensus algorithms for blockchains [visual finite state machines]","authors":"loredana","tags":["wasmx","treechains","mythos"]},"unlisted":false,"prevItem":{"title":"why wasmX?","permalink":"/blog/why-wasmx"},"nextItem":{"title":"MythosX - Trees of blockchains - a scaling solution [multichain elective state syncing]","permalink":"/blog/treechains-multichain-elective-state-syncing"}},"content":"Simple blockchains are dying, long live the trees of blockchains.\\n\\nMythosX presents treechains:  heterogeneous consensus algorithms for blockchains as WASM-interpreted graphical finite state machines.\\n\\n\x3c!-- truncate --\x3e\\n\\nDecentralized, immutable, proof-based technology is to Artificial Intelligence what Shiva is to Shakti.\\n\\nThe digital world needs grounding, needs boundaries and a solid structure, for intelligence to flow harmoniously.\\n\\nWe are building the next-next generation of shivachains.\\n\\nWe have talked about trees of blockchains and MythosX and the type of cross-chain transactions that this system enables. You know by now that our systems are WebAssembly based and upgradable.\\n\\nI will show you how MythosX uses a heterogeneous system of consensus algorithms.\\n\\nFirst, Mythos uses Tendermint, implemented as a finite state machine, interpreted by a WASM contract. This diagram is what runs the protocol. I change this diagram, I change the protocol. In previous videos I\'ve discussed our state machine interpreter and this diagram in detail.\\n\\nThen, for our hierarchical tree chain that grows from the grassroots upwards, we have our LevelX consensus protocol. This is a simplified version of Tendermint. LevelX is the default consensus protocol, but the subchains can use whatever consensus algorithm is available.\\n\\nThen, for our private, node-specific Level0 subchain, we have our Level0 on-demand consensus. Level0 is a private chain that records all node-specific negotiations, configurations, setups and even user chats. So, it does not need to produce blocks all the time. So, it only produces blocks at startup and whenever transactions come.\\nMost of the time, it stays in this waiting state. And when it produces a block, it transitions into the Validator state. This protocol is the LevelX protocol. So, we can have a version of Tendermint that does the same thing.\\n\\nAnd this is a demonstration of this new, on-demand consensus protocol.\\n\\nI have set up two nodes here, with Mythos and Level0. Let\'s start them and check the level0 logs.\\nSo, after initialization, we see a block being produced and then, block production on Level0, stops.\\nBut, we have a Lobby contract that negotiates the creation of a level1 subchain with the other node. So, these negotiation transactions trigger Level0 blocks.\\n\\nIf we send a transaction, for example a genesis transaction for this level1 subchain, we see it being registered and a block is produced.\\n\\nOtherwise, no blocks are produced on Level0.\\n\\nThis family of on-demand consensus algorithms are great for mobile devices. And if you want to increase trust and provability, you can pair them with transactions on a remote chain that produces blocks continuously, so you can root your Level0 chain in time.\\n\\nYou can have a variety of consensus protocols that you can test on subchains. Developing new protocols is easy, creating chains programmatically is easy.\\n\\nAnd anyone can create a subchain without being a developer. This is the system that we are building.\\n\\nA system created for decentralized collaboration and development. Created to scale at network state levels. Created to provide a basis for a new human civilization rooted in the dynamic relationship between blockchain and AI: between Shiva and Shakti.\\n\\n\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/4ocX_w_xj0g?si=qDwjOBJ6m7niuZo9\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>"},{"id":"treechains-multichain-elective-state-syncing","metadata":{"permalink":"/blog/treechains-multichain-elective-state-syncing","editUrl":"https://github.com/loredanacirstea/wasmx-docs/tree/main/blog/2024-11-10-treechains-multichain-elective-state-syncing.md","source":"@site/blog/2024-11-10-treechains-multichain-elective-state-syncing.md","title":"MythosX - Trees of blockchains - a scaling solution [multichain elective state syncing]","description":"Introducing MythosX: a trust-scalable system powered by a networked set of homogeneous blockchains based on our WasmX engine, as a multi-level decentralized hierarchical tree.","date":"2024-11-10T00:00:00.000Z","tags":[{"inline":false,"label":"wasmx","permalink":"/blog/tags/wasmx","description":"wasmx tag description"},{"inline":false,"label":"treechains","permalink":"/blog/tags/treechains","description":"treechains tag description"},{"inline":false,"label":"mythos","permalink":"/blog/tags/mythos","description":"mythos tag description"},{"inline":false,"label":"networkstate","permalink":"/blog/tags/networkstate","description":"networkstate tag description"}],"readingTime":4.01,"hasTruncateMarker":true,"authors":[{"name":"Loredana Cirstea","title":"Lead Engineer @ wasmX","url":"https://github.com/loredanacirstea","page":{"permalink":"/blog/authors/loredana"},"socials":{"x":"https://x.com/lorecirstea","github":"https://github.com/loredanacirstea"},"imageURL":"https://avatars.githubusercontent.com/u/4785356?v=4","key":"loredana"}],"frontMatter":{"slug":"treechains-multichain-elective-state-syncing","title":"MythosX - Trees of blockchains - a scaling solution [multichain elective state syncing]","authors":"loredana","tags":["wasmx","treechains","mythos","networkstate"]},"unlisted":false,"prevItem":{"title":"MythosX - Treechains - heterogeneous consensus algorithms for blockchains [visual finite state machines]","permalink":"/blog/treechains-heterogeneous-consensus-algorithms"},"nextItem":{"title":"MythosX - Trees of blockchains - a scaling solution [multichain elective state syncing]","permalink":"/blog/multichain-cross-chain-tx"}},"content":"Introducing MythosX: a trust-scalable system powered by a networked set of homogeneous blockchains based on our WasmX engine, as a multi-level decentralized hierarchical tree.\\n\\nSimple blockchains are dead. Long live the trees of blockchains.\\n\\nToday we demo multichain elective state syncing. One node, three or more chains with on-demand state-sync.\\n\\n\x3c!-- truncate --\x3e\\n\\nSimple blockchains are dead. Long live the trees of blockchains.\\n\\nWe are building a trust scalable system powered by a networked set of homogeneous blockchains based on our WasmX engine. This network is a multi-level decentralized hierarchical tree, where the tree is constructed in reverse.\\n\\nOur wasmX engine, the core of every chain is a WebAssembly-based, upgradable & customizable blockchain core that can be extended through WASM modules. It is compatible with both Cosmos and Ethereum blockchains. In fact, WasmX uses the Cosmos Baseapp, while reimplementing all additional modules as WASM contracts.\\nWasmX is extensible with different languages, different consensus algorithms, different roles and privileges for contracts, rollup chains and something that we will demonstrate in the near future, plugins for sets or groups of nodes.\\n\\nOur MythosX system is a collaboraboration between Mythos, a private level0 chain and our networked subchains, that we call levels. All of these blockchains run on WasmX.\\nAnd today you will see a demo of nodes running MythosX.\\n\\nWe now have 3 nodes, each running Mythos and their own private level0 chain. They are also running a time chain, that we presented in a previous video.\\n\\nWe can see these 3 validators in the explorer here. And Mythos is producing blocks.\\n\\nTwo of these nodes will negotiate and spawn a level1 chain.\\nThe negotiation transactions are recorded on each level0 chain, so each node has the negotiation history.\\n\\nEach node sends a genesis transaction with their validator information, to their respective level0 chain.\\nAt the moment, creation of these levels is programmatic and before the genesis transaction, the nodes have already negotiated their genesis data.\\n\\n```\\nmythosd tx multichain register-subchain-gentx /Users/user/dev/blockchain/wasmx-tests/validator_lvl.json --chain-id=\\"level0_1000-1\\" --from node0 --keyring-backend test --home ./testnet/node0/mythosd --fees 200000000000alvl --gas 90000000 --yes --log_level trace --trace\\n\\nmythosd tx multichain register-subchain-gentx /Users/user/dev/blockchain/wasmx-tests/validator_lvl.json --chain-id=\\"level0_1000-1\\" --from node1 --keyring-backend test --home ./testnet/node1/mythosd --fees 200000000000alvl --gas 90000000 --yes --log_level trace --trace --node tcp://localhost:26660\\n```\\n\\nAnd the new level1 chain is started.\\n\\nAnd we can see the chain also on the explorer, with 2 validators. And producing blocks.\\n\\nNow the 3rd node that runs Mythos, does not know about the level1 chain.\\nBut it can take the chain_id information and basic information about denominations & address prefix and can connect to one of the other nodes and sync it.\\n\\nSo, we register the level1 chain on our multichain registry on level0:\\n\\n```\\n[registration tx]\\n```\\n\\nAnd now, we can sync it by chain ID.\\n\\nWe get the trust height and trust hash from a block.\\n\\n```\\nhttp://86.120.99.11:26657/block\\n\\nTRUST_HEIGHT=2024\\nTRUST_HASH=2FAF0F3912166FE7E79A6A328AD12B99FD441B8856449415326369E3328B565F\\n\\nsed -i.bak -E \\"s|^(enable[[:space:]]+=[[:space:]]+).*$|\\\\1true| ; \\\\\\ns|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\\\\1\\\\\\"$RPC,$RPC\\\\\\"| ; \\\\\\ns|^(trust_height[[:space:]]+=[[:space:]]+).*$|\\\\1$TRUST_HEIGHT| ; \\\\\\ns|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\\\\1\\\\\\"$TRUST_HASH\\\\\\"|\\" $HOMEMAIN/config/config.toml\\n```\\n\\nAnd we send this information in a transaction on the level0 chain.\\n\\n```\\n[sync tx]\\n```\\n\\nAnd we see it finding snapshots, verifying them and applying them.\\nWe wait for the chain to be synced.\\n\\nNow, that it is synced, we can send a transaction to become a validator. So, the 3rd node can also become a validator.\\nFirst, we send the 3rd node some level1 tokens.\\nAnd then the create validator transaction.\\n\\n```\\n[create-valid tx]\\n```\\n\\nWe see the transaction was added to the mempool and executed and indexed in the block.\\n\\nAnd we see can see it in the explorer too. And now, there are 3 validators producing blocks.\\n\\nEach node now runs 3 and a half chains: the independent and public Mythos chain, the private level0 chain, the level1 chain and the time chain that can be used by any of the other chains.\\n\\nThis multichain, hierarchical tree-like system is heavily based on our consensusless contracts theory, that we have explained in detail in previous videos.\\nThe core protocol is contracts. Contracts that can be upgraded through governance at any time. The chain negotiation protocol for example, can be upgraded at any time, during the lifespan of the chains. The consensus protocols also.\\n\\nThis is the most complex decentralized treechain system. A system created for decentralized collaboration and development. Created to scale at network state levels.\\n\\n\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/fGoTvMAYth0?si=z3CDr6VmuyN-u1ki\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>"},{"id":"multichain-cross-chain-tx","metadata":{"permalink":"/blog/multichain-cross-chain-tx","editUrl":"https://github.com/loredanacirstea/wasmx-docs/tree/main/blog/2024-10-24-multichain-cross-chain-tx.md","source":"@site/blog/2024-10-24-multichain-cross-chain-tx.md","title":"MythosX - Trees of blockchains - a scaling solution [multichain elective state syncing]","description":"We are building a trust scalable system powered by a networked set of homogeneous blockchains based on our WasmX engine.","date":"2024-10-24T00:00:00.000Z","tags":[{"inline":false,"label":"wasmx","permalink":"/blog/tags/wasmx","description":"wasmx tag description"},{"inline":false,"label":"treechains","permalink":"/blog/tags/treechains","description":"treechains tag description"},{"inline":false,"label":"mythos","permalink":"/blog/tags/mythos","description":"mythos tag description"},{"inline":false,"label":"networkstate","permalink":"/blog/tags/networkstate","description":"networkstate tag description"}],"readingTime":6.72,"hasTruncateMarker":true,"authors":[{"name":"Loredana Cirstea","title":"Lead Engineer @ wasmX","url":"https://github.com/loredanacirstea","page":{"permalink":"/blog/authors/loredana"},"socials":{"x":"https://x.com/lorecirstea","github":"https://github.com/loredanacirstea"},"imageURL":"https://avatars.githubusercontent.com/u/4785356?v=4","key":"loredana"}],"frontMatter":{"slug":"multichain-cross-chain-tx","title":"MythosX - Trees of blockchains - a scaling solution [multichain elective state syncing]","authors":"loredana","tags":["wasmx","treechains","mythos","networkstate"]},"unlisted":false,"prevItem":{"title":"MythosX - Trees of blockchains - a scaling solution [multichain elective state syncing]","permalink":"/blog/treechains-multichain-elective-state-syncing"}},"content":"We are building a trust scalable system powered by a networked set of homogeneous blockchains based on our WasmX engine.\\n\\nOur wasmX engine is a WebAssembly-based, upgradable & customizable blockchain core that can be extended through WASM modules. It is compatible with both Cosmos and Ethereum blockchains. In fact, WasmX uses the Cosmos Baseapp, while reimplementing all additional modules as WASM contracts.\\n\\n\x3c!-- truncate --\x3e\\n\\nNow imagine a hierarchy of blockchain levels, without going into too much detail, the higher the level, the sparser the information on that chain. The highest level contains mostly proofs of the activity on the lower chains and aggregate data from the lower chains. The higher levels are also a trust provider for the lower level chains.\\nThe lower level chains hold the actual data and they can be scaled independently.\\nLower levels can have more independence as to their rules of use and they can eventually choose wether or not to be part of this hierarchy.\\n\\nThis type of system can reach instant national-scale voting for the country of France with 2200 validators - this is just 0.4% of the number of validators that Ethereum has.\\n\\nAlso, these levels can communicate through cross-chain transactions. And this is what I will demo today.\\n\\nLet\'s create the simplest local setup: we have 3 validators on a Mythos testnet, with a minimum of 1 validator for each subchain that is created.\\n\\n```\\nmythosd testnet init-files --chain-id=mythos_7000-14 --output-dir=$(pwd)/testnet --v=3 --keyring-backend=test --minimum-gas-prices=\\"1000amyt\\" --same-machine=true --nocors --libp2p --min-level-validators=1 --enable-eid=false\\n```\\n\\nwe start the nodes and then run the setup for creating 2 levels, each with 1 validator. we execute this on the mythos local chain, because this is where the multichain registry is.\\n\\n```\\nmythosd testnet create-levels 2 1 --chain-id=\\"mythos_7000-14\\" --keyring-backend test --home ./testnet\\n```\\n\\nwhen we register new chains, the multichain registry generates a default genesis setup for the chain and registers the node sending the request as a validator.\\n\\n```\\n\\"start registering new default subchain\\"\\n\\"start registering new subchain validator\\"\\n```\\n\\nin this version of the multichain registry, only Mythos validators can create subchains. And in the production version, only accounts with valid electronic IDs will be able to validate.\\n\\nWhen the chain has enough validators, it can be initialized. And this simply triggers an event on Mythos. That is caught by each node and each node can decide to initialize this subchain or not.\\n\\n```\\n\\"node is validating the new subchain\\"\\n```\\n\\ngenerally, only the nodes who are validators are by default the ones that will initialize the subchain.\\n\\nSo, with the same software, we are running multiple chains here. mythos, this chain0_1_1001-1 chain, this level0 chain is a private blockchain, private to the device.\\n\\nOn top of this level1 chain0_1_1001-1 that we have created, another one is also created automatically - a level2 chain.\\n\\nSo, I can demonstrate communication between the level1 & level 2 chains.\\n\\nSo, lets deploy some contracts on these two chains. And we can interact with any of these chains.\\n\\n\\n* we will deploy a simple storage contract on level 1\\n* this is the simple storage contract - with set & get methods.\\n\\n```\\nmythosd tx wasmx store ./x/network/keeper/testdata/wasmx/simple_storage.wasm --chain-id=chain0_1_1001-1 --registry-chain-id=mythos_7000-14 --from=node0 --keyring-backend=test --home=./testnet/node0/mythosd --fees=90000000000alvl0 --gas=9000000 --yes\\n```\\n\\n* chain id is chain0 .. and the multichain registry is on the mythos chain - the multichain registry is a contract under consensus rules and holds the chain configurations - like address prefixes & denominations.\\n\\n* we can look after the store_code event and we see it here, the code id is 50, for the wasm contract. so we can instante it.\\n\\n```\\nmythosd tx wasmx instantiate 50 \'{\\"data\\":\\"{}\\"}\' --label \\"simple_storage\\" --chain-id=chain0_1_1001-1 --registry-chain-id=mythos_7000-14 --from=node0 --keyring-backend=test --home=./testnet/node0/mythosd --fees=90000000000alvl0 --gas=9000000 --yes\\n```\\n\\n* search \\"instantiate\\" and we get the address of the new contract.\\n\\n```\\nchain016tsljek8g3av2rp8wnztga65xkn2dns8vdh4rl\\n```\\n\\n* now lets deploy on the level 2 chain a contract that knows how to make a cross-chain transaction.\\n* this is the crosschain test contract, it just forwards the request to the system. and we will use this contract to send a transaction to the level1 simple storage contract and change a value there. We deploy it.\\n\\n```\\nmythosd tx wasmx store ./x/network/keeper/testdata/wasmx/crosschain.wasm --chain-id=leveln_2_1002-1 --registry-chain-id=mythos_7000-14 --from=node0 --keyring-backend=test --home=./testnet/node0/mythosd --fees=90000000000alvl2 --gas=9000000 --yes\\n```\\n\\n* It also has a code id of 50. We instantiate it.\\n\\n```\\nmythosd tx wasmx instantiate 50 \'{\\"data\\":\\"{}\\"}\' --label \\"crosschain\\" --chain-id=leveln_2_1002-1 --registry-chain-id=mythos_7000-14 --from=node0 --keyring-backend=test --home=./testnet/node0/mythosd --fees=90000000000alvl2 --gas=9000000 --yes\\n```\\n\\n* Search \\"instantiate\\". And we get the address `leveln1dpfdf0r42qttzgg6qnkkc7tyscx4t6r44fdmxf`\\n\\n* Now, let\'s set a variable on the simple storage contract at key \\"hello\\", we store the string \\"brian\\"\\n\\n```\\nmythosd tx wasmx execute chain016tsljek8g3av2rp8wnztga65xkn2dns8vdh4rl \'{\\"set\\":{\\"key\\":\\"hello\\",\\"value\\":\\"brian\\"}}\' --chain-id=chain0_1_1001-1 --registry-chain-id=mythos_7000-14 --from=node0 --keyring-backend=test --home=./testnet/node0/mythosd --fees=90000000000alvl0 --gas=9000000 --yes\\n```\\n\\n* and now we can query it.\\n\\n```\\nmythosd query multichain call chain016tsljek8g3av2rp8wnztga65xkn2dns8vdh4rl \'{\\"get\\":{\\"key\\":\\"hello\\"}}\' --from node0 --keyring-backend test --chain-id=chain0_1_1001-1 --registry-chain-id=mythos_7000-14 --home=./testnet/node0/mythosd\\n```\\n\\n* and we get `brian`\\n\\n* cross-chain transactions are part of what we call atomic transactions. and I have a cli command that makes it easy to create these atomic transactions from a json file.\\n\\n* essentially, we call the CrossChain method of the crosschain test contract. with this request to the simple storage contract on level 1 chain. the message is base64 encoded and it is setting the value \\"sammy\\" for the \\"hello\\" key\\n\\n* now we execute this atomic transaction, we need to say what chains are affected by it. Also, an atomic transaction can contain many internal transactions to several chains. in this case, we only have one cross-chain transaction.\\n\\n```\\nmythosd tx multichain atomic \\"/Users/user/dev/blockchain/wasmx-tests/atomictx.json\\" leveln_2_1002-1,chain0_1_1001-1 --chain-id=leveln_2_1002-1 --registry-chain-id=mythos_7000-14 --from=node0 --keyring-backend=test --home=./testnet/node0/mythosd --fees=90000000000alvl2 --gas=9000000 --yes\\n```\\n\\nWe execute it and we will look at the logs containing the word \\"atomic\\"\\n\\nBut lets see if the value has changed in our storage contract. and it is now \\"sammy\\".\\n\\nwe see the atomic transaction was added to the level 2 chain mempool. and the level 2 chain is the leader for the atomic tx, so only this chain can begin execution.\\n\\nnow we see the atomic transaction being added to the level1 chain mempool. this chain will wait to execute this transaction until after the leader starts execution.\\n\\nand this is what happens next - the leader starts execution by adding it to the block proposal.\\n\\nnow the level 1 chain tries to add the atomic transaction to its next block proposal and sees that the leader chain has begun execution, so it can also begin execution.\\nand then the internal cross-chain requests begin, where the two chains exchange requests and responses.\\n\\nnext, we see a block finalization for the level 1 chain and another block finalization for the level 2 chain.\\nso, the chains finalize their blocks together.\\n\\nCross-chain transactions, atomic transactions on multiple chains, that are executed by the chains finalizing a block at the same time on multiple hierarchical chains.\\n\\nIn future videos we will see cross-chain transactions on same level chains & much more.\\n\\nThis tech is possible due to our continuous innovations on blockchain tech designs. I remind you all that this effort is made 100% as self-funded volunteer effort over a course of 8 years. And we will achieve tech that can revolutionize human & digital consensus, soon.\\n\\n\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/6wcV7OeReeQ?si=Z8_KmI54gRde8TEz\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>"}]}}')}}]);